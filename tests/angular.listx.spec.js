// Generated by CoffeeScript 1.7.1
describe('ListX directive', function() {
  var $compile, $controller, $rootScope, $templateCache, element, listxConfig, scope;
  element = scope = $compile = $rootScope = $controller = $templateCache = listxConfig = null;
  beforeEach(module('listxModule'));
  beforeEach(module('list-tpl'));
  beforeEach(inject(function(_$compile_, _$rootScope_, _$controller_, _$templateCache_, _listxConfig_) {
    $compile = _$compile_;
    $rootScope = _$rootScope_;
    $templateCache = _$templateCache_;
    listxConfig = _listxConfig_;
    $rootScope.items = [
      {
        text: 'Item 1',
        desc: 'Desc 1'
      }, {
        text: 'Item 2',
        desc: 'Desc 2'
      }, {
        text: 'Item 3',
        desc: 'Desc 3'
      }, {
        text: 'Item 4',
        desc: 'Desc 4'
      }
    ];
    element = $compile('<list-x ng-model="items" title="Test"></list-x>')($rootScope);
    $rootScope.$digest();
    scope = element.isolateScope();
    return $controller = _$controller_('listxController', {
      $scope: scope,
      $element: element,
      $attrs: {},
      $transclude: function() {
        return null;
      },
      $templateCache: $templateCache,
      listxConfig: listxConfig
    });
  }));
  it('Replaces the element with the appropriate content', function() {
    return expect(element).toHaveClass("list-x-main");
  });
  it('Has correct title', function() {
    var titleElement;
    titleElement = element.find(':first-child');
    expect(titleElement).toHaveId("list-x-title");
    return expect(titleElement[0].innerText.trim()).toEqual("Test");
  });
  it('Has a search bar', function() {
    var searchBarElement;
    searchBarElement = element.find('.search-bar');
    expect(searchBarElement).toExist();
    return expect(searchBarElement.find('input[type=search]')).toExist();
  });
  it('Has the correct number of items', function() {
    var items, listElement;
    listElement = element.find('ul.list-x');
    expect(listElement).toExist();
    items = listElement.find('li');
    return expect(items).toHaveLength(4);
  });
  describe('List item', function() {
    return it('Has correct template', function() {
      var items;
      items = element.find('ul.list-x li');
      return expect(items.find('.list-x-item')).toExist();
    });
  });
  return describe('ListX Controller', function() {
    it('Should be defined', function() {
      return expect($controller).toBeDefined();
    });
    it('Has the correct configuration', function() {
      expect(scope.searchBarTemplate).toEqual(listxConfig.searchBarTemplate);
      expect(scope.itemsTemplate).toEqual(listxConfig.itemsTemplate);
      return expect(scope.itemTemplate).toEqual(listxConfig.itemTemplate);
    });
    it('Should mark given item selected', function() {
      expect(scope.isSelected(scope.ngModel[0])).toNotEqual('active');
      scope.ngModel[0].selected = true;
      return expect(scope.isSelected(scope.ngModel[0])).toEqual('active');
    });
    it('Should select the item', function() {
      var i, _i, _results;
      expect(scope.ngModel[1].selected).toBeUndefined();
      scope.selectItem(scope.ngModel[1]);
      expect(scope.ngModel[1].selected).toBeDefined();
      _results = [];
      for (i = _i = 0; _i <= 3; i = ++_i) {
        if (i !== 1) {
          _results.push(expect(scope.ngModel[i].selected).toBeUndefined());
        }
      }
      return _results;
    });
    return it('Should set the item\'s template', function() {
      $controller.setItemTemplate('<span>test</span>');
      expect(scope.itemTpl).toEqual(true);
      return expect($templateCache.get('listxItemTpl')).toEqual('<span>test</span>');
    });
  });
});

//# sourceMappingURL=angular.listx.spec.map
